import math

def fermat_factor(n):
    """
    Метод Ферма для разложения составного нечетного числа n на два сомножителя.

    Идея метода:
        Если n — нечётное число, и оно представимо как разность квадратов:
            n = a^2 - b^2 = (a - b)(a + b),
        то можно найти такие a и b, при которых это верно.
        Это основано на том, что любое нечётное составное число можно так представить.

    Алгоритм:
        1. Начинаем с a = ⌈√n⌉ (наименьшее целое, не меньшее корня из n)
        2. Вычисляем b^2 = a^2 - n
        3. Увеличиваем a, пока b^2 не станет точным квадратом
        4. Когда это произойдёт, возвращаем делители: (a - b), (a + b)

    Примечания:
        - Подходит лучше всего для чисел, у которых множители близки друг к другу
        - Если разность множителей велика — работает медленно

    Параметры:
        n (int): нечётное составное число, которое нужно разложить

    Возвращает:
        tuple: два целых числа — множители числа n

    Пример:
        fermat_factor(5959) → (59, 101), так как 5959 = 59 * 101
    """
    # Стартуем с наименьшего целого числа, не меньшего sqrt(n)
    a = math.isqrt(n)
    if a * a < n:
        a += 1  # Если sqrt(n) не целое, округляем вверх

    # Считаем b^2 = a^2 - n
    b2 = a * a - n

    # Увеличиваем a, пока b^2 не станет точным квадратом
    while not math.isqrt(b2) ** 2 == b2:
        a += 1
        b2 = a * a - n

    # b = sqrt(b^2), т.е. isqrt() возвращает целочисленный квадратный корень из неотрицательного числа, округляя его вниз до ближайшего целого числа
    b = math.isqrt(b2)

    # Возвращаем найденные множители: (a - b) * (a + b) = n
    return a - b, a + b


# Пример
print("Множители 5959:", fermat_factor(5959))      # 5959 = 59 * 101
print("Множители 10403:", fermat_factor(10403))    # 10403 = 101 * 103
print("Множители 24961:", fermat_factor(24961))    # 24961 = 157 * 159
input() # Для того, чтобы программа не закрывалась сразу

import numpy as np  # pip install numpy (если запускаешься на десктопе)

def hill_encrypt(text, key_matrix):
    """
    Шифр Хилла (размер 2x2): шифрует текст, преобразуя каждые 2 буквы с помощью матрицы ключа.

    Как работает:
    - Текст переводим в верхний регистр и убираем пробелы.
    - Если длина текста нечетная, добавляем букву 'X' для дополнения.
    - Каждые две буквы представляем как вектор чисел (A=0, B=1, ..., Z=25).
    - Умножаем этот вектор на ключевую матрицу по модулю 26.
    - Результат — новый вектор, переводим обратно в буквы.
    - Склеиваем зашифрованные блоки в итоговую строку.

    Параметры:
    - text — исходный текст (только буквы).
    - key_matrix — 2x2 матрица с целыми элементами.

    Важно:
    - Чтобы расшифровать, нужна обратная матрица по модулю 26.
    - В этом примере реализовано только шифрование.
    """

    text = text.upper().replace(" ", "")  # Убираем пробелы и делаем заглавными
    if len(text) % 2 != 0:  # Если длина нечётная, дополняем 'X'
        text += 'X'

    result = ''
    for i in range(0, len(text), 2):
        # Преобразуем пару букв в числовой вектор
        block = [ord(c) - ord('A') for c in text[i:i+2]]
        # Умножаем матрицу на вектор и берём остаток по модулю 26
        encrypted = np.dot(key_matrix, block) % 26
        # Преобразуем обратно в буквы и добавляем к результату
        result += ''.join(chr(num + ord('A')) for num in encrypted)
    return result

# Пример:
key = np.array([[3, 3], [2, 5]])  # Ключевая матрица (определитель 9 — обратим по mod 26)
text = "HIRUSLAN"
print("Исходный текст:", text)
print("Зашифрованный текст (Хилл):", hill_encrypt(text, key))

input()  # Чтобы программа не закрывалась сразу

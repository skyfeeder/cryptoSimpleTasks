import random
import math

def modinv(a, m):
    """
    Находит обратный элемент к числу a по модулю m.
    Использует встроенную функцию pow с отрицательной степенью.
    
    Обратный элемент x — число, такое что (a * x) % m = 1.
    
    Пример:
        modinv(3, 11) -> 4, потому что 3*4 % 11 = 12 % 11 = 1
    """
    return pow(a, -1, m)

def elgamal_sign(m, p, g, x):
    """
    Создаёт цифровую подпись сообщения m в криптосистеме Эль-Гамаля.

    Параметры:
    m - сообщение (число)
    p - большое простое число (модуль)
    g - генератор группы по модулю p
    x - секретный ключ (случайное число, меньше p)

    Возвращает пару (r, s) — цифровую подпись.

    Как это работает:
    1. Выбираем случайное k, взаимно простое с p-1.
    2. Вычисляем r = g^k mod p.
    3. Находим обратный к k по модулю p-1.
    4. Вычисляем s = k_inv * (m - x*r) mod (p-1).
    """
    while True:
        k = random.randint(2, p - 2)
        if math.gcd(k, p - 1) == 1:
            break  # k должно быть взаимно простым с p-1
    r = pow(g, k, p)
    k_inv = modinv(k, p - 1)
    s = (k_inv * (m - x * r)) % (p - 1)
    return r, s

def elgamal_verify(m, r, s, p, g, y):
    """
    Проверяет цифровую подпись (r, s) для сообщения m в Эль-Гамале.

    Параметры:
    m - исходное сообщение
    r, s - подпись
    p, g - публичные параметры системы
    y - публичный ключ, y = g^x mod p

    Проверка: g^m mod p == (y^r * r^s) mod p

    Возвращает True, если подпись валидна, иначе False.
    """
    left = pow(g, m, p)
    right = (pow(y, r, p) * pow(r, s, p)) % p
    return left == right


# Пример:

# Параметры
p, g, x = 467, 2, 127   # p - большое простое, g - генератор, x - секретный ключ
y = pow(g, x, p)        # публичный ключ y

m = 123                 # сообщение

# Создаём подпись
r, s = elgamal_sign(m, p, g, x)

# Проверяем подпись
print("Подпись (r, s):", r, s)
print("Проверка подписи:", elgamal_verify(m, r, s, p, g, y))  # True, если всё правильно

# Дополнительные примеры:

# Пример 1: сообщение 456
m2 = 456
r2, s2 = elgamal_sign(m2, p, g, x)
print(f"Проверка подписи для сообщения {m2}:", elgamal_verify(m2, r2, s2, p, g, y))

# Пример 2: сообщение 789
m3 = 789
r3, s3 = elgamal_sign(m3, p, g, x)
print(f"Проверка подписи для сообщения {m3}:", elgamal_verify(m3, r3, s3, p, g, y))

input() # Для того, чтобы программа не закрывалась сразу